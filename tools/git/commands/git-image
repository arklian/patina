#!/bin/bash
####################################################################################################
# Usage Instructions
####################################################################################################

# This script uploads images to a specific Google Drive folder, DigitalOcean Spaces,
# and updates the image.ts file with the new URLs. It also creates a new folder in DigitalOcean Spaces
# and uploads the contents of the Google Drive folder to that new folder. A version file is created
# for version control using the timestamp.
#
# Prerequisites:
#   - Ensure `doctl`, `jq`, `awscli`, and `curl` are installed on your system.
#   - Set the environment variables `DIGITAL_OCEAN_SPACES_ACCESS`, `DIGITAL_OCEAN_SPACES_SECRET`,
#     `GOOGLE_CLIENT_ID`, `GOOGLE_CLIENT_SECRET`, `GOOGLE_REFRESH_TOKEN`, and `GOOGLE_DRIVE_FOLDER_ID`.
#
# Usage:
#   git image <image_path_or_directory> <environment>
# Example:
#   git image /path/to/your/image.png prod
#   git image /path/to/your/image.png dev
#
# The script will upload the specified image(s) to the specified Google Drive folder and the configured DigitalOcean Space,
# and update the image.ts file located at $HOME/patina/js/src/patina/assets/images.ts with the new URLs.

####################################################################################################
# Dependency Checks
####################################################################################################

# Function to check if doctl is installed
check_doctl() {
    if ! command -v doctl &> /dev/null; then
        echo "doctl is not installed. Please install it first."
        echo "To install doctl, follow these steps:"
        echo "1. For macOS: brew install doctl"
        echo "2. For Linux: sudo snap install doctl"
        echo "3. For Windows: Download and install from https://github.com/digitalocean/doctl/releases"
        exit 1
    fi
}

# Function to check if jq is installed
check_jq() {
    if ! command -v jq &> /dev/null; then
        echo "jq is not installed. Please install it first."
        echo "To install jq, follow these steps:"
        echo "1. For macOS: brew install jq"
        echo "2. For Linux: sudo apt-get install jq -y"
        echo "3. For Windows: Download and install from https://stedolan.github.io/jq/download/"
        exit 1
    fi
}

# Function to check if aws CLI is installed
check_aws() {
    if ! command -v aws &> /dev/null; then
        echo "aws CLI is not installed. Please install it first."
        echo "To install aws CLI, follow these steps:"
        echo "1. For macOS: brew install awscli"
        echo "2. For Linux: sudo apt-get install awscli -y"
        echo "3. For Windows: Download and install from https://aws.amazon.com/cli/"
        echo "                             Set Up                                       "
        echo "-Run aws configure and enter your DigitalOcean Spaces Access Key and Secret Key."
        echo "-Set the default region name to nyc3 (or your region)."
        echo "-Set the output format to json."
        exit 1
    fi
}

# Function to check if openssl is installed
check_openssl() {
    if ! command -v openssl &> /dev/null; then
        echo "openssl is not installed. Please install it first."
        echo "To install openssl, follow these steps:"
        echo "1. For macOS: brew install openssl"
        echo "2. For Linux: sudo apt-get install openssl -y"
        echo "3. For Windows: Download and install from https://www.openssl.org/"
        exit 1
    fi
}

# Function to check if curl is installed
check_curl() {
    if ! command -v curl &> /dev/null; then
        echo "curl is not installed. Please install it first."
        echo "To install curl, follow these steps:"
        echo "1. For macOS: brew install curl"
        echo "2. For Linux: sudo apt-get install curl -y"
        echo "3. For Windows: Download and install from https://curl.se/download.html"
        exit 1
    fi
}

# Check if doctl, jq, aws CLI, openssl, and curl are installed
check_doctl
check_jq
check_aws
check_openssl
check_curl

####################################################################################################
# Script Pre-validation
####################################################################################################

REGION="nyc3"
ENDPOINT_URL="https://${REGION}.digitaloceanspaces.com"
IMAGE_TS_PATH="$HOME/patina/js/src/patina/assets/images.ts"

# Check if the correct number of arguments are provided
if [ "$#" -lt 2 ]; then
    echo "Usage: git image <image_path_or_directory> <environment>"
    echo "Environment options: prod, dev"
    exit 1
fi

# Assign arguments to variables
PATH_TO_UPLOAD=$1
ENVIRONMENT=$2

# Generate a unique timestamp for versioning
TIMESTAMP=$(date +'%Y-%m-%d[%H:%M:%S]')
VERSION_FILE="$HOME/patina/js/src/patina/assets/imgVersion.txt"

# Determine the space name and path based on the environment
case "$ENVIRONMENT" in
    prod)
        SPACE_NAME="patina-prod"
        NEW_SPACE_PATH="webimg/${TIMESTAMP}/"  # Creating a unique folder name with timestamp
        ;;
    dev)
        SPACE_NAME="patina-dev"
        NEW_SPACE_PATH="webimg-dev/${TIMESTAMP}/"  # Creating a unique folder name with timestamp
        ;;
    *)
        echo "Invalid environment: $ENVIRONMENT"
        echo "Environment options: prod, dev"
        exit 1
        ;;
esac


####################################################################################################
# Verify information
####################################################################################################
# Check if environment variables are set
if [ -z "$DIGITAL_OCEAN_SPACES_ACCESS" ] || [ -z "$DIGITAL_OCEAN_SPACES_SECRET" ]; then
    echo "Environment variables DIGITAL_OCEAN_SPACES_ACCESS and DIGITAL_OCEAN_SPACES_SECRET must be set."
    exit 1
fi

if [ -z "$GOOGLE_CLIENT_ID" ] || [ -z "$GOOGLE_CLIENT_SECRET" ] || [ -z "$GOOGLE_REFRESH_TOKEN" ] || [ -z "$GOOGLE_DRIVE_FOLDER_ID" ]; then
    echo "Environment variables GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET, GOOGLE_REFRESH_TOKEN, and GOOGLE_DRIVE_FOLDER_ID must be set."
    exit 1
fi

# Check if the image.ts file exists
echo "Checking for image.ts at $IMAGE_TS_PATH"
if [ ! -f "$IMAGE_TS_PATH" ]; then
    echo "image.ts file not found at $IMAGE_TS_PATH. Please ensure the file exists and the path is correct."
    exit 1
fi

# Check if the path exists
if [ ! -e "$PATH_TO_UPLOAD" ]; then
    echo "Path not found: $PATH_TO_UPLOAD"
    exit 1
fi

####################################################################################################
# Function to Obtain Google Drive Access Token
####################################################################################################

get_access_token() {
    ACCESS_TOKEN=$(curl -s \
      --request POST \
      --data "client_id=$GOOGLE_CLIENT_ID&client_secret=$GOOGLE_CLIENT_SECRET&refresh_token=$GOOGLE_REFRESH_TOKEN&grant_type=refresh_token" \
      https://oauth2.googleapis.com/token | jq -r '.access_token')

    if [ -z "$ACCESS_TOKEN" ]; then
        echo "Failed to obtain access token."
        exit 1
    fi
}

####################################################################################################
# Function to Upload File to Google Drive
####################################################################################################

upload_to_google_drive() {
    local FILE_PATH=$1
    local FILE_NAME=$(basename "$FILE_PATH")

    if [ -d "$FILE_PATH" ]; then
        # If it's a directory, recursively upload its contents
        echo "Entering directory: $FILE_PATH"
        for ITEM in "$FILE_PATH"/*; do
            upload_to_google_drive "$ITEM"
        done
    else
        # If it's a file, upload it
        echo "Uploading file: $FILE_NAME"
        get_access_token

        RESPONSE=$(curl -s -X POST \
            -L -H "Authorization: Bearer $ACCESS_TOKEN" \
            -F "metadata={name :\"$FILE_NAME\", parents: [\"$GOOGLE_DRIVE_FOLDER_ID\"]};type=application/json;charset=UTF-8" \
            -F "file=@$FILE_PATH;type=$(file -b --mime-type $FILE_PATH)" \
            "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart")

        #Uncomment to debug
        #echo "Google Drive API Response: $RESPONSE"

        FILE_ID=$(echo "$RESPONSE" | jq -r '.id')

        if [ "$FILE_ID" != "null" ] && [ -n "$FILE_ID" ]; then
            echo "File '$FILE_NAME' uploaded successfully to Google Drive with ID: $FILE_ID"
        else
            echo "Failed to upload file '$FILE_NAME' to Google Drive."
            exit 1
        fi
    fi
}

####################################################################################################
# Upload to DO(earlier design)
####################################################################################################
#
#upload_file() {
#    local FILE_PATH=$1
#    local FILE_NAME=$(basename "$FILE_PATH")
#
#    # Check if the file name contains spaces
#    if [[ "$FILE_NAME" == *" "* ]]; then
#        echo "The file name '$FILE_NAME' contains spaces. Skipping this file."
#        return
#    fi
#
#    # Calculate the date in the correct format
#    DATE=$(date -R -u)
#
#    # Create the string to sign
#    STRING_TO_SIGN="PUT\n\napplication/octet-stream\n${DATE}\nx-amz-acl:public-read\n/${SPACE_NAME}/${SPACE_PATH}${FILE_NAME}"
#
#    # Create the signature
#    SIGNATURE=$(echo -en "${STRING_TO_SIGN}" | openssl sha1 -hmac "${DIGITAL_OCEAN_SPACES_SECRET}" -binary | base64)
#
#    # Upload the file using curl
#    RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X PUT -T "$FILE_PATH" \
#        -H "Date: ${DATE}" \
#        -H "Authorization: AWS ${DIGITAL_OCEAN_SPACES_ACCESS}:${SIGNATURE}" \
#        -H "Content-Type: application/octet-stream" \
#        -H "x-amz-acl: public-read" \
#        "https://${SPACE_NAME}.${REGION}.digitaloceanspaces.com/${SPACE_PATH}${FILE_NAME}")
#
#    if [ "$RESPONSE" -eq 200 ]; then
#        echo "File '$FILE_NAME' uploaded successfully to https://${SPACE_NAME}.${REGION}.digitaloceanspaces.com/${SPACE_PATH}${FILE_NAME}"
#    else
#        echo "Failed to upload file '$FILE_NAME'. Response code: $RESPONSE"
#        # Print detailed error message
#        curl -X PUT -T "$FILE_PATH" \
#            -H "Date: ${DATE}" \
#            -H "Authorization: AWS ${DIGITAL_OCEAN_SPACES_ACCESS}:${SIGNATURE}" \
#            -H "Content-Type: application/octet-stream" \
#            -H "x-amz-acl: public-read" \
#            "https://${SPACE_NAME}.${REGION}.digitaloceanspaces.com/${SPACE_PATH}${FILE_NAME}" -v
#    fi
#}


####################################################################################################
# Function to Download from Google Drive and Upload to DigitalOcean
####################################################################################################

download_and_upload_to_do() {
    get_access_token

    # Clear only image files in the tmp directory before starting the process
    rm -f /tmp/*.jpg /tmp/*.png /tmp/*.jpeg 2>/dev/null

    # List files in the Google Drive folder
    FILES=$(curl -s -X GET \
        -H "Authorization: Bearer $ACCESS_TOKEN" \
        "https://www.googleapis.com/drive/v3/files?q='$GOOGLE_DRIVE_FOLDER_ID'+in+parents&fields=files(id,name,mimeType)" | jq -r '.files[] | @base64')

    echo "Creating new folder in DigitalOcean Spaces: $NEW_SPACE_PATH"

    # Track processed files to avoid duplicates
    processed_files=()

    # Loop through each file in the Google Drive folder
    for FILE in $FILES; do
        _jq() {
            echo ${FILE} | base64 --decode | jq -r ${1}
        }

        FILE_ID=$(_jq '.id')
        FILE_NAME=$(_jq '.name')

        # Check if the file has already been processed
        if [[ " ${processed_files[@]} " =~ " ${FILE_NAME} " ]]; then
            echo "Skipping duplicate file: $FILE_NAME"
            continue
        fi

        # Mark the file as processed
        processed_files+=("$FILE_NAME")

        # Download the file from Google Drive to /tmp directory
        echo "Downloading $FILE_NAME from Google Drive"
        curl -s -X GET \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -o "/tmp/$FILE_NAME" \
            "https://www.googleapis.com/drive/v3/files/$FILE_ID?alt=media"

        # Upload the file from /tmp directory to DigitalOcean Spaces
        echo "Uploading $FILE_NAME to DigitalOcean Spaces in folder $NEW_SPACE_PATH"
        aws s3 cp "/tmp/$FILE_NAME" "s3://${SPACE_NAME}/${NEW_SPACE_PATH}${FILE_NAME}" --acl public-read --endpoint-url ${ENDPOINT_URL}

        if [ $? -eq 0 ]; then
            echo "File '$FILE_NAME' uploaded successfully to DigitalOcean Spaces."
        else
            echo "Failed to upload file '$FILE_NAME' to DigitalOcean Spaces."
            exit 1
        fi

        # Clean up the temporary file to avoid processing it again
        rm "/tmp/$FILE_NAME"
    done
}



####################################################################################################
# Function to Create Version File
####################################################################################################

create_version_file() {
    echo "Creating version file at $VERSION_FILE"
    echo "Version: $TIMESTAMP" > "$VERSION_FILE"
    echo "Environment: $ENVIRONMENT" >> "$VERSION_FILE"
    echo "Folder: $NEW_SPACE_PATH" >> "$VERSION_FILE"
    echo "Version file created successfully."
}

####################################################################################################
# Update Image.Ts
####################################################################################################

# Function to update the image.ts file with new image URLs
update_image_ts() {
    echo "Updating image.ts with new image URLs..."

    # Get the list of files in the webimg folder using aws CLI
    FILES=$(aws s3api list-objects --bucket ${SPACE_NAME} --prefix ${NEW_SPACE_PATH} --query 'Contents[].Key' --output json --endpoint-url ${ENDPOINT_URL})

    # Parse the JSON output to extract keys
    FILE_KEYS=$(echo "$FILES" | jq -r '.[]' 2>/dev/null)

    # Check if jq parsing was successful
    if [ -z "$FILE_KEYS" ]; then
        echo "Error: Unable to parse JSON output from aws s3api."
        echo "$FILES"
        exit 1
    fi

    # Read the existing content of image.ts file
    EXISTING_CONTENT=$(<"$IMAGE_TS_PATH")

    # Create a set of existing keys using awk
    existing_keys=$(echo "$EXISTING_CONTENT" | awk -F': ' '/^[[:space:]]*[a-zA-Z0-9_]+:/ {print $1}' | tr '\n' ' ')

    # Initialize new URLs string
    NEW_URLS=""

    # Loop through each file and create the URL
    while IFS= read -r FILE_NAME; do
        URL="https://${SPACE_NAME}.${REGION}.digitaloceanspaces.com/${FILE_NAME}"
        KEY=$(echo "$FILE_NAME" | sed -e 's/^webimg\///' -e 's/\.[a-zA-Z0-9]*$//' -e 's/[^a-zA-Z0-9]/_/g')

        echo "Checking if $KEY exists in the existing keys..."
        # If the key is not already in the list, add it
        if ! grep -qw "$KEY" <<< "$existing_keys"; then
            echo "Adding $KEY to new URLs"
            NEW_URLS="${NEW_URLS}  ${KEY}: {\n    src: '${URL}',\n  },\n"
        else
            echo "$KEY already exists in image.ts"
        fi
    done <<< "$FILE_KEYS"

    # If there are new URLs, append them to the existing content and write to image.ts
    if [ -n "$NEW_URLS" ]; then
        echo "New URLs found. Updating image.ts..."
        # Remove the closing brace from the existing content
        EXISTING_CONTENT=$(echo "$EXISTING_CONTENT" | sed 's/}$//')
        # Append the new URLs and close the brace
        NEW_CONTENT="${EXISTING_CONTENT}\n${NEW_URLS}}"
        echo -e "$NEW_CONTENT" > "$IMAGE_TS_PATH"
        echo "Final content of image.ts:"
        echo "$NEW_CONTENT"
        echo "image.ts has been updated."
    else
        echo "No new URLs to add."
    fi
}

####################################################################################################
# main Function
####################################################################################################

# Check if the path is a directory
if [ -d "$PATH_TO_UPLOAD" ]; then
    # Recursively upload the directory contents
    upload_to_google_drive "$PATH_TO_UPLOAD"
else
    # If the path is a single file, upload it to Google Drive and DigitalOcean
    upload_to_google_drive "$PATH_TO_UPLOAD"
#    upload_file "$PATH_TO_UPLOAD"
fi

# Download from Google Drive and upload to DigitalOcean Spaces
download_and_upload_to_do

# Create the version file
create_version_file

# Update the image.ts file
#update_image_ts
